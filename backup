module Main where

import Prelude
import Control.Promise (Promise, await, pure)
import Data.DateTime (getCurrentDateTime)
import Data.String.CodeUnits (split)
import Effect (Effect)
import Node.FS.Sync (mkdir, rename, rmdir)
import Node.Process (execFileSync)

-- Set destination and source paths
dstPath :: String
dstPath = "E:\\Auto_Backup\\"

dstPath1 :: String
dstPath1 = "<destination_path>"

srcPath :: String
srcPath = "E:\\Auto_Backup\\"

-- Get current date
getCurrentDate :: Effect String
getCurrentDate = do
  dt <- getCurrentDateTime
  let mm = padWithZero $ show (month dt)
      dd = padWithZero $ show (day dt)
      yyyy = show (year dt)
  pure $ mm <> "-" <> dd <> "-" <> yyyy

padWithZero :: String -> String
padWithZero s = if length s < 2 then "0" <> s else s

-- Create destination directory
createDestinationDirectory :: String -> Effect Unit
createDestinationDirectory mydate = mkdir (dstPath <> mydate) {}

-- Backup
backup :: String -> Effect Unit
backup mydate = do
  execFileSync "exp" ["ldswl/ldsafm@loomdata", "file=" <> dstPath <> "\\lds.dmp"] {}
  rename (dstPath <> "\\lds.dmp") (dstPath <> mydate) {}
  execFileSync "C:\\Program Files (x86)\\WinRAR\\WinRAR.exe" ["a", dstPath <> "\\" <> mydate <> ".rar", dstPath <> "\\" <> mydate, "-hplds", "-ep", "-ep1"] {}
  execFileSync "xcopy" [dstPath <> "\\" <> mydate <> ".rar", dstPath1, "/s", "/h"] {}
  rmdir (dstPath <> mydate) { recursive: true }

main :: Effect Unit
main = do
  mydate <- await $ getCurrentDate
  await $ createDestinationDirectory mydate
  putStrLn mydate
  await $ backup mydate
